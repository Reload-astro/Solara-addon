local Library = {}

Library.setmetatable = setmetatable

function Library.getmetatable(obj)
    local mt = getmetatable(obj)
    if type(mt) == "table" then
        return mt
    end
    return nil
end

function Library.getrawmetatable(obj)
    assert(type(obj) == "table" or type(obj) == "userdata", "invalid argument #1 to 'getrawmetatable' (table or userdata expected)")
    local mt = Library.getmetatable(obj)
    if mt and mt.__metatable then
        local temp = mt.__metatable
        mt.__metatable = nil 
        local result = Library.getmetatable(obj)
        mt.__metatable = temp 
        return result
    end
    return mt
end

function Library.setrawmetatable(obj, new_mt)
    assert(type(obj) == "table" or type(obj) == "userdata", "invalid argument #1 to 'setrawmetatable'")
    assert(type(new_mt) == "table" or new_mt == nil, "invalid argument #2 to 'setrawmetatable'")
    local success, err = pcall(setmetatable, obj, new_mt)
    if not success then
        error("failed to set metatable: " .. tostring(err))
    end
    return true
end

function Library.hookmetamethod(obj, method, func)
    assert(type(obj) == "table" or type(obj) == "userdata", "invalid argument #1 to 'hookmetamethod'")
    assert(type(method) == "string", "invalid argument #2 to 'hookmetamethod'")
    assert(type(func) == "function", "invalid argument #3 to 'hookmetamethod'")
    
    local mt = Library.getrawmetatable(obj)
    if not mt then
        error("object has no metatable")
    end

    local old = mt[method]
    mt[method] = func

    return old
end

function Library.setreadonly(obj, readonly)
    assert(type(obj) == "table" or type(obj) == "userdata", "invalid argument #1 to 'setreadonly'")
    assert(type(readonly) == "boolean", "invalid argument #2 to 'setreadonly'")
    
    local mt = Library.getrawmetatable(obj)
    if mt then
        pcall(function()
            mt.__metatable = readonly and "Locked!" or nil
        end)
    end
end

function Library.newclosure(func)
    assert(type(func) == "function", "invalid argument #1 to 'newclosure' (function expected)")
    return function(...)
        return func(...)
    end
end

function Library.newcclosure(func)
    assert(type(func) == "function", "invalid argument #1 to 'newcclosure' (function expected)")
    return coroutine.wrap(function(...)
        while true do
            coroutine.yield(func(...))
        end
    end)
end

return Library
